# -*- coding: utf-8 -*-

"""
    uberapilib.models.price_esitmate
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/13/2016
"""
from .base_model import BaseModel

class PriceEsitmate(BaseModel):

    """Implementation of the 'Price Esitmate' model.

    Price estimates for products

    Attributes:
        currency_code (string): ISO 4217 currency code.
        display_name (string): Display name of product.
        distance (float): Expected activity distance (in miles).
        duration (int): Expected activity duration (in seconds). Always show
            duration in minutes.
        estimate (string): Formatted string of estimate in local currency of
            the start location. Estimate could be a range, a single number
            (flat rate) or "Metered" for TAXI.
        high_estimate (int): Upper bound of the estimated price.
        low_estimate (int): Lower bound of the estimated price.
        product_id (string): Unique identifier representing a specific product
            for a given latitude & longitude. For example, uberX in San
            Francisco will have a different product_id than uberX in Los
            Angeles.
        surge_multiplier (float): Expected surge multiplier. Surge is active
            if surge_multiplier is greater than 1. Price estimate already
            factors in the surge multiplier.

    """

    def __init__(self, 
                 currency_code = None,
                 display_name = None,
                 distance = None,
                 duration = None,
                 estimate = None,
                 high_estimate = None,
                 low_estimate = None,
                 product_id = None,
                 surge_multiplier = None):
        """Constructor for the PriceEsitmate class"""
        
        # Initialize members of the class
        self.currency_code = currency_code
        self.display_name = display_name
        self.distance = distance
        self.duration = duration
        self.estimate = estimate
        self.high_estimate = high_estimate
        self.low_estimate = low_estimate
        self.product_id = product_id
        self.surge_multiplier = surge_multiplier

        # Create a mapping from Model property names to API property names
        self.names = {
            "currency_code" : "currency_code",
            "display_name" : "display_name",
            "distance" : "distance",
            "duration" : "duration",
            "estimate" : "estimate",
            "high_estimate" : "high_estimate",
            "low_estimate" : "low_estimate",
            "product_id" : "product_id",
            "surge_multiplier" : "surge_multiplier",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            currency_code = dictionary.get("currency_code")
            display_name = dictionary.get("display_name")
            distance = dictionary.get("distance")
            duration = dictionary.get("duration")
            estimate = dictionary.get("estimate")
            high_estimate = dictionary.get("high_estimate")
            low_estimate = dictionary.get("low_estimate")
            product_id = dictionary.get("product_id")
            surge_multiplier = dictionary.get("surge_multiplier")
            # Return an object of this model
            return cls(currency_code,
                       display_name,
                       distance,
                       duration,
                       estimate,
                       high_estimate,
                       low_estimate,
                       product_id,
                       surge_multiplier)
