# -*- coding: utf-8 -*-

"""
    uberapilib.models.request_details_collections
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/13/2016
"""
from .driver import Driver
from .location import Location
from .vehicle import Vehicle
from .base_model import BaseModel

class RequestDetailsCollections(BaseModel):

    """Implementation of the 'Request Details Collections' model.

    TODO: type model description here.

    Attributes:
        driver (Driver): The object that contains driver details.
        eta (int): The estimated time of vehicle arrival in minutes.
        location (Location): The object that contains the location information
            of the vehicle and driver.
        request_id (string): The unique ID of the Request.
        status (string): The status of the Request indicating state.
        surge_multiplier (float): The surge pricing multiplier used to
            calculate the increased price of a Request. A multiplier of 1.0
            means surge pricing is not in effect.
        vehicle (Vehicle): The object that contains vehicle details.

    """

    def __init__(self, 
                 driver = None,
                 eta = None,
                 location = None,
                 request_id = None,
                 status = None,
                 surge_multiplier = None,
                 vehicle = None):
        """Constructor for the RequestDetailsCollections class"""
        
        # Initialize members of the class
        self.driver = driver
        self.eta = eta
        self.location = location
        self.request_id = request_id
        self.status = status
        self.surge_multiplier = surge_multiplier
        self.vehicle = vehicle

        # Create a mapping from Model property names to API property names
        self.names = {
            "driver" : "driver",
            "eta" : "eta",
            "location" : "location",
            "request_id" : "request_id",
            "status" : "status",
            "surge_multiplier" : "surge_multiplier",
            "vehicle" : "vehicle",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            driver = Driver.from_dictionary(dictionary.get("driver")) if dictionary.get("driver") else None
            eta = dictionary.get("eta")
            location = Location.from_dictionary(dictionary.get("location")) if dictionary.get("location") else None
            request_id = dictionary.get("request_id")
            status = dictionary.get("status")
            surge_multiplier = dictionary.get("surge_multiplier")
            vehicle = Vehicle.from_dictionary(dictionary.get("vehicle")) if dictionary.get("vehicle") else None
            # Return an object of this model
            return cls(driver,
                       eta,
                       location,
                       request_id,
                       status,
                       surge_multiplier,
                       vehicle)
