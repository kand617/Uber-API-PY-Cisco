# -*- coding: utf-8 -*-

"""
    uberapilib.models.user_activity
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/13/2016
"""
from .history import History
from .base_model import BaseModel

class UserActivity(BaseModel):

    """Implementation of the 'User Activity' model.

    The record user activity in history

    Attributes:
        count (int): Total number of items available.
        history (list of History): Information including the pickup location,
            dropoff location, request start time, request end time, and
            distance of requests (in miles), as well as the product type that
            was requested.
        limit (int): Number of items to retrieve (100 max).
        offset (int): Position in pagination.

    """

    def __init__(self, 
                 count = None,
                 history = None,
                 limit = None,
                 offset = None):
        """Constructor for the UserActivity class"""
        
        # Initialize members of the class
        self.count = count
        self.history = history
        self.limit = limit
        self.offset = offset

        # Create a mapping from Model property names to API property names
        self.names = {
            "count" : "count",
            "history" : "history",
            "limit" : "limit",
            "offset" : "offset",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            count = dictionary.get("count")
            history = None
            if dictionary.get("history") != None:
                history = list()
                for structure in dictionary.get("history"):
                    history.append(History.from_dictionary(structure))
            limit = dictionary.get("limit")
            offset = dictionary.get("offset")
            # Return an object of this model
            return cls(count,
                       history,
                       limit,
                       offset)
