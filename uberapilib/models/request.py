# -*- coding: utf-8 -*-

"""
    uberapilib.models.request
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/13/2016
"""
from .error_base import ErrorBase

class Request(ErrorBase):

    """Implementation of the 'Request' model.

    TODO: type model description here.
    NOTE: This class inherits from 'ErrorBase'.

    Attributes:
        driver (dict<object, object>): The object that contains driver
            details.
        eta (int): The estimated time of vehicle arrival in minutes.
        location (dict<object, object>): The object that contains the location
            information of the vehicle and driver
        request_id (string): The unique ID of the Request.
        status (string): The status of the Request indicating state.
        surge_multiplier (float): The surge pricing multiplier used to
            calculate the increased price of a Request. A multiplier of 1.0
            means surge pricing is not in effect.
        vehicle (dict<object, object>): The object that contains vehicle
            details.

    """

    def __init__(self, 
                 driver = None,
                 errors = None,
                 eta = None,
                 location = None,
                 meta = None,
                 request_id = None,
                 status = None,
                 surge_multiplier = None,
                 vehicle = None):
        """Constructor for the Request class"""
        
        # Initialize members of the class
        self.driver = driver
        self.eta = eta
        self.location = location
        self.request_id = request_id
        self.status = status
        self.surge_multiplier = surge_multiplier
        self.vehicle = vehicle

        # Call the constructor for the base class
        super(Request, self).__init__(errors,
                                      meta)

        # Create a mapping from Model property names to API property names
        self.names = {
            "driver" : "driver",
            "errors" : "errors",
            "eta" : "eta",
            "location" : "location",
            "meta" : "meta",
            "request_id" : "request_id",
            "status" : "status",
            "surge_multiplier" : "surge_multiplier",
            "vehicle" : "vehicle",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            driver = dictionary.get("driver")
            errors = None
            if dictionary.get("errors") != None:
                errors = list()
                for structure in dictionary.get("errors"):
                    errors.append(Errors.from_dictionary(structure))
            eta = dictionary.get("eta")
            location = dictionary.get("location")
            meta = dictionary.get("meta")
            request_id = dictionary.get("request_id")
            status = dictionary.get("status")
            surge_multiplier = dictionary.get("surge_multiplier")
            vehicle = dictionary.get("vehicle")
            # Return an object of this model
            return cls(driver,
                       errors,
                       eta,
                       location,
                       meta,
                       request_id,
                       status,
                       surge_multiplier,
                       vehicle)
