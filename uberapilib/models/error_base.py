# -*- coding: utf-8 -*-

"""
    uberapilib.models.error_base
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 12/13/2016
"""
from .errors import Errors
from .base_model import BaseModel

class ErrorBase(BaseModel):

    """Implementation of the 'ErrorBase' model.

    TODO: type model description here.

    Attributes:
        errors (list of Errors): TODO: type description here.
        meta (string): TODO: type description here.

    """

    def __init__(self, 
                 errors = None,
                 meta = None):
        """Constructor for the ErrorBase class"""
        
        # Initialize members of the class
        self.errors = errors
        self.meta = meta

        # Create a mapping from Model property names to API property names
        self.names = {
            "errors" : "errors",
            "meta" : "meta",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            errors = None
            if dictionary.get("errors") != None:
                errors = list()
                for structure in dictionary.get("errors"):
                    errors.append(Errors.from_dictionary(structure))
            meta = dictionary.get("meta")
            # Return an object of this model
            return cls(errors,
                       meta)
